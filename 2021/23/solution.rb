lines = IO.readlines("input")

#############
#...........#
###B#C#B#D###
  #A#D#C#A#
  #########
# a1, a2 = [[2,2],[2,8]]
# b1, b2 = [[1,2],[1,6]]
# c1, c2 = [[1,4],[2,6]]
# d1, d2 = [[2,4],[1,8]]

#############
#...........#
###B#B#D#A###
  #C#A#D#C#
  #########

grid = [
  "...........".split(''),
  "##B#B#D#A##".split(''),
  " #C#A#D#C# ".split('')
]

grid2 = [
  "...........".split(''),
  "##B#B#D#A##".split(''),
  " #D#C#B#A# ".split(''),
  " #D#B#A#C# ".split(''),
  " #C#A#D#C# ".split('')
]


test_grid = [
  "...........".split(''),
  "##B#C#B#D##".split(''),
  " #D#C#B#A# ".split(''),
  " #D#B#A#C# ".split(''),
  " #A#D#C#A# ".split('')
]

test_grid_1 = [
  ".........D.".split(''),
  "##A#B#C#.##".split(''),
  " #A#B#C#D# ".split('')
]

test_grid_2 = [
  "D..B...B..D".split(''),
  "##A#.#C#.##".split(''),
  " #A#.#C#.# ".split('')
]

@goal = [
  "...........".split(''),
  "##A#B#C#D##".split(''),
  " #A#B#C#D# ".split(''),
  " #A#B#C#D# ".split(''),
  " #A#B#C#D# ".split('')
]

def print_letters grid
  puts `clear`
  puts "#############"
  puts "#" + grid[0].join + "#"
  puts "#" + grid[1].join + "#"
  puts " " + grid[2].join + " "
  puts " " + grid[3].join + " "
  puts " " + grid[4].join + " "
  puts "  #########  "
  # raise "More than four As!" if grid.sum{|l| l.sum{|c| c=="A" ? 1 : 0}} > 4
  # raise "More than four Bs!" if grid.sum{|l| l.sum{|c| c=="B" ? 1 : 0}} > 4
  # raise "More than four Cs!" if grid.sum{|l| l.sum{|c| c=="C" ? 1 : 0}} > 4
  # raise "More than four Ds!" if grid.sum{|l| l.sum{|c| c=="D" ? 1 : 0}} > 4
  # raise "Less than four As!" if grid.sum{|l| l.sum{|c| c=="A" ? 1 : 0}} < 2
  # raise "Less than four Bs!" if grid.sum{|l| l.sum{|c| c=="B" ? 1 : 0}} < 2
  # raise "Less than four Cs!" if grid.sum{|l| l.sum{|c| c=="C" ? 1 : 0}} < 2
  # raise "Less than four Ds!" if grid.sum{|l| l.sum{|c| c=="D" ? 1 : 0}} < 2
end

def home? grid, y, x
  return false if y==0
  return false unless letter = grid[y][x].match(/[A-D]/)&.send(:[], 0)
  home_x = (letter.ord - "A".ord + 1) * 2
  x == home_x && 
    (y==4 || 
    (y==3 && grid[4][home_x] == letter) ||
    (y==2 && grid[4][home_x] == letter && grid[3][home_x] == letter) ||
    (grid[4][home_x] == letter && grid[3][home_x] == letter && grid[2][home_x] == letter))
end

def moves_to_home grid, y, x
  return 0 if home?(grid, y, x)
  return 0 unless letter = grid[y][x].match(/[A-D]/)&.send(:[], 0)
  home_x = (letter.ord - "A".ord + 1) * 2
  (x - home_x).abs + y + ( grid[2][home_x] == letter ? 1 : 2 )
end

@heur = {}
@heur[@goal] = 0

def heur grid
  return @heur[grid] if @heur[grid]
  return @heur[grid] = 99999 if available_moves(grid).empty?
  
  t = 0
  0.upto(grid.length-1) do |y|
    0.upto(grid[0].length-1) do |x|
      next unless letter = grid[y][x].match(/[A-D]/)&.send(:[], 0)
      next if home?(grid, y, x)

      multiplier = 10**(letter.ord - "A".ord)
      t += moves_to_home(grid, y, x) * multiplier
    end
  end
  @heur[grid] = t
end

def lowest_score f, set
  min_grid = []
  low = 9999999
  set.each{|s| (low = f[s]; min_grid = s) if f[s] < low}
  min_grid
end

def reconstruct_path from, current
  total_path = [current]
  while from.keys.include?(current)
    current = from[current]
    total_path.prepend(current)
  end
  total_path
end

def available_moves grid
  grids = []
  
  [1,2,3,4].each do |y|
    grid[y].each_with_index do |l, x|
      next if home?(grid, y, x) ||
        (y==2 && grid[1][x].match?(/[A-D]/)) ||
        (y==3 && grid[2][x].match?(/[A-D]/)) ||
        (y==4 && grid[3][x].match?(/[A-D]/))
      next unless letter = l.match(/[A-D]/)&.send(:[], 0)

      [0,1,3,5,7,9,10].each do |new_x|
        next if grid[0][[new_x, x].min..[new_x, x].max].join.match(/[A-D]/)

        new_grid = grid.map{|l| l.clone}
        new_grid[y][x],new_grid[0][new_x] = [new_grid[0][new_x],new_grid[y][x]]
        
        grids << new_grid
      end
    end
  end

  grid[0].each_with_index do |l, x|
    next unless letter = l.match(/[A-D]/)&.send(:[], 0)
    home_x = (letter.ord - "A".ord + 1) * 2
    next if grid[1][home_x] != '.'
    
    home_y = 1
    home_y += 1 while home_y < grid.length-1 && grid[home_y+1][home_x] == '.'
    
    next if home_y==3 && grid[home_y+1][home_x] != letter
    next if home_y==2 && (grid[home_y+1][home_x] != letter || grid[home_y+2][home_x] != letter)
    next if home_y==1 && (grid[home_y+1][home_x] != letter || grid[home_y+2][home_x] != letter || grid[home_y+3][home_x] != letter)

    range = []
    if home_x < x
      range = [home_x, x-1]
    else
      range = [home_x, x+1]
    end
    next if grid[0][range.min..(range.max)].join.match?(/[A-D]/)
    next unless grid[home_y][home_x] == "."

    new_grid = grid.map{|l| l.clone}
    new_grid[0][x],new_grid[home_y][home_x] = [new_grid[home_y][home_x],new_grid[0][x]]

    grids << new_grid
  end

  grids
end

def cost_to_move from, to
  to_y, to_x, from_y, from_x = [0, 0, 0, 0]
  multiplier = 0
  0.upto(to.length-1) do |y|
    0.upto(to[0].length-1) do |x|
      next unless letter = to[y][x].match(/[A-D]/)&.send(:[], 0)
      next if to[y][x] == from[y][x]

      to_y = y
      to_x = x
      multiplier = 10**(letter.ord - "A".ord)
    end
  end
  0.upto(from.length-1) do |y|
    0.upto(from[0].length-1) do |x|
      next unless letter = from[y][x].match(/[A-D]/)&.send(:[], 0)
      next if to[y][x] == from[y][x]

      from_y = y
      from_x = x
    end
  end
  
  ((from_y-to_y).abs + (from_x - to_x).abs) * multiplier
end

def a_star grid
  set = [grid]
  from = {}
  
  g = {}
  g[grid] = 0

  f = {}

  f[grid] = heur(grid)

  while set.length > 0
    curr_grid = lowest_score f, set
    print_letters curr_grid
    return [reconstruct_path(from, curr_grid), g[curr_grid]] if curr_grid == @goal

    set -= [curr_grid]

    available_moves(curr_grid).each do |new_grid|
      tent_g = (g[curr_grid] || 9999999) + cost_to_move(curr_grid, new_grid)
      
      
      if tent_g < (g[new_grid] || 9999999)
        from[new_grid] = curr_grid
        g[new_grid] = tent_g
        f[new_grid] = tent_g + heur(new_grid)
        set << new_grid if !set.include?(new_grid)
      end
    end
  end
end

p a_star(grid2)

# path = [[[".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["#", "#", "B", "#", "B", "#", "D", "#", "A", "#", "#"], [" ", "#", "D", "#", "C", "#", "B", "#", "A", "#", " "], [" ", "#", "D", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "C", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["#", "#", ".", "#", "B", "#", "D", "#", "A", "#", "#"], [" ", "#", "D", "#", "C", "#", "B", "#", "A", "#", " "], [" ", "#", "D", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "C", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", "A", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", "A", "#", " "], [" ", "#", "D", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "C", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", ".", ".", ".", ".", ".", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", "A", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", "A", "#", " "], [" ", "#", ".", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "C", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", ".", ".", "A", ".", ".", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", "A", "#", " "], [" ", "#", ".", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "C", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", ".", ".", "A", ".", "A", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", ".", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "C", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", "C", ".", "A", ".", "A", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", ".", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", ".", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", "C", ".", ".", ".", "A", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", ".", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", "C", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", "C", ".", "C", ".", ".", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", ".", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "C", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", ".", ".", "D", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", ".", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", ".", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", ".", ".", ".", "D"], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", ".", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "D", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", ".", ".", ".", "."], ["#", "#", ".", "#", "B", "#", "D", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "D", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", "D", ".", ".", "."], ["#", "#", ".", "#", "B", "#", ".", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", ".", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "D", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", ".", ".", ".", "."], ["#", "#", ".", "#", "B", "#", ".", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", "B", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "D", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", ".", ".", ".", "B"], ["#", "#", ".", "#", "B", "#", ".", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "A", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "D", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", ".", ".", "A", "B"], ["#", "#", ".", "#", "B", "#", ".", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "D", "#", "D", "#", " "]], [["B", "C", ".", "C", ".", "C", ".", "D", ".", "A", "B"], ["#", "#", ".", "#", "B", "#", ".", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", ".", "#", "D", "#", " "]], [["B", "C", ".", "C", ".", ".", ".", "D", ".", "A", "B"], ["#", "#", ".", "#", "B", "#", ".", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", "D", ".", "A", "B"], ["#", "#", ".", "#", "B", "#", ".", "#", ".", "#", "#"], [" ", "#", ".", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", ".", ".", "A", "B"], ["#", "#", ".", "#", "B", "#", ".", "#", "D", "#", "#"], [" ", "#", ".", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", ".", ".", ".", "B"], ["#", "#", ".", "#", "B", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", "B", ".", ".", "B"], ["#", "#", ".", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", "C", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", "C", ".", "B", ".", ".", "B"], ["#", "#", ".", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", ".", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", "B", ".", ".", "B"], ["#", "#", ".", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", "B", ".", "B", ".", ".", "B"], ["#", "#", ".", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "A", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", "A", ".", "B", ".", "B", ".", ".", "B"], ["#", "#", ".", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", "B", ".", "B", ".", ".", "B"], ["#", "#", "A", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", "B", ".", ".", "B"], ["#", "#", "A", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "]], [["B", "C", ".", ".", ".", ".", ".", ".", ".", ".", "B"], ["#", "#", "A", "#", ".", "#", ".", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "]], [["B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "B"], ["#", "#", "A", "#", ".", "#", "C", "#", "D", "#", "#"], [" ", "#", "A", "#", ".", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "]], [[".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "B"], ["#", "#", "A", "#", ".", "#", "C", "#", "D", "#", "#"], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "]], [[".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["#", "#", "A", "#", "B", "#", "C", "#", "D", "#", "#"], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "], [" ", "#", "A", "#", "B", "#", "C", "#", "D", "#", " "]]]

# scores = []
# path.each_cons(2) do |from, to|
#   scores << cost_to_move(from, to)
# end

# puts scores
# puts scores.sum

# A * 1
# B * 10
# C * 100
# D * 1000

# 11608 RIGHT - 82622 paths 
# 46754

# 11610 wrong
# 11628 wrong
# 11668 wrong
# 11686 wrong
# 11698 wrong
# 11708 wrong
# 11710 wrong
